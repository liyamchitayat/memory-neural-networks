INFO:experimental_framework:Created subset with 6000 samples for classes {2, 3, 4, 5, 6, 7}
INFO:experimental_framework:Class distribution: {2: 1000, 3: 1000, 4: 1000, 5: 1000, 6: 1000, 7: 1000}
INFO:experimental_framework:Created subset with 6000 samples for classes {0, 1, 2, 3, 4, 5}
INFO:experimental_framework:Class distribution: {0: 1000, 1: 1000, 2: 1000, 3: 1000, 4: 1000, 5: 1000}
INFO:experimental_framework:Created subset with 1200 samples for classes {2, 3, 4, 5, 6, 7}
INFO:experimental_framework:Class distribution: {2: 200, 3: 200, 4: 200, 5: 200, 6: 200, 7: 200}
INFO:experimental_framework:Created subset with 1200 samples for classes {0, 1, 2, 3, 4, 5}
INFO:experimental_framework:Class distribution: {0: 200, 1: 200, 2: 200, 3: 200, 4: 200, 5: 200}
INFO:experimental_framework:Epoch 1/5: Loss = 1.1788, Accuracy = 0.8975
INFO:experimental_framework:Epoch 2/5: Loss = 0.4460, Accuracy = 0.9250
INFO:experimental_framework:âœ“ Model achieved required accuracy 0.9250 >= 0.9
INFO:experimental_framework:Epoch 1/5: Loss = 0.5612, Accuracy = 0.9542
INFO:experimental_framework:âœ“ Model achieved required accuracy 0.9542 >= 0.9
INFO:neural_concept_transfer:Source classes S_B: {2, 3, 4, 5, 6, 7}
INFO:neural_concept_transfer:Target classes S_A: {0, 1, 2, 3, 4, 5}
INFO:neural_concept_transfer:Shared classes S_shared: {2, 3, 4, 5}
INFO:neural_concept_transfer:Transfer classes: {6, 7}
INFO:neural_concept_transfer:=== Fitting Neural Concept Transfer System ===
INFO:neural_concept_transfer:Step 1: Training Sparse Autoencoders
INFO:neural_concept_transfer:Training source SAE...
INFO:neural_concept_transfer:SAE Epoch 0: Loss = 0.0813
INFO:neural_concept_transfer:SAE Epoch 20: Loss = 0.0063
INFO:neural_concept_transfer:SAE Epoch 40: Loss = 0.0063
INFO:neural_concept_transfer:Training target SAE...
INFO:neural_concept_transfer:SAE Epoch 0: Loss = 0.0689
INFO:neural_concept_transfer:SAE Epoch 20: Loss = 0.0099
INFO:neural_concept_transfer:SAE Epoch 40: Loss = 0.0082
INFO:neural_concept_transfer:Step 2: Extracting concept centroids
INFO:neural_concept_transfer:Class 2: 1000 samples
INFO:neural_concept_transfer:Class 3: 1000 samples
INFO:neural_concept_transfer:Class 4: 1000 samples
INFO:neural_concept_transfer:Class 5: 1000 samples
INFO:neural_concept_transfer:Class 6: 1000 samples
INFO:neural_concept_transfer:Class 7: 1000 samples
INFO:neural_concept_transfer:Class 0: 1000 samples
INFO:neural_concept_transfer:Class 1: 1000 samples
INFO:neural_concept_transfer:Class 2: 1000 samples
INFO:neural_concept_transfer:Class 3: 1000 samples
INFO:neural_concept_transfer:Class 4: 1000 samples
INFO:neural_concept_transfer:Class 5: 1000 samples
INFO:neural_concept_transfer:Step 3: Fitting Orthogonal Procrustes alignment
INFO:neural_concept_transfer:Procrustes alignment error: 0.1731
INFO:neural_concept_transfer:Step 4: Discovering free space
INFO:neural_concept_transfer:Used space rank: 6, Free dimensions: 8
INFO:neural_concept_transfer:System fitted successfully: {'alignment_error': np.float32(0.17312853), 'concept_dim': 24, 'n_shared_classes': 4, 'n_transfer_classes': 2, 'free_dimensions': 6}
INFO:robust_balanced_transfer:Training ROBUST injection system...
INFO:robust_balanced_transfer:ROBUST injection training for class 6
INFO:robust_balanced_transfer:ROBUST training step 0: Loss = 4.2526
INFO:robust_balanced_transfer:ROBUST training step 10: Loss = 4.4108
INFO:robust_balanced_transfer:ROBUST training step 20: Loss = 3.6619
INFO:robust_balanced_transfer:ROBUST training step 30: Loss = 4.4987
INFO:robust_balanced_transfer:ROBUST training step 40: Loss = 4.1086
INFO:robust_balanced_transfer:âœ… ROBUST injection training completed
INFO:robust_balanced_transfer:ROBUST adaptation for class 6
INFO:robust_balanced_transfer:Starting ROBUST adaptation for class 6
INFO:robust_balanced_transfer:ROBUST adaptation with 53 samples
INFO:robust_balanced_transfer:ROBUST stage 1: lr=0.003, reg=0.05
INFO:robust_balanced_transfer:Stage 1 Step 0: Adaptation=5.6140, Preservation=0.9603, Effectiveness=0.0000, Balanced Score=0.4000
INFO:robust_balanced_transfer:ðŸŽ¯ NEW BEST robust score: 0.4000
INFO:robust_balanced_transfer:Stage 1 Step 5: Adaptation=4.7482, Preservation=0.9602, Effectiveness=0.0000, Balanced Score=0.4000
INFO:robust_balanced_transfer:Stage 1 Step 10: Adaptation=3.8912, Preservation=0.9595, Effectiveness=0.0000, Balanced Score=0.4000
INFO:robust_balanced_transfer:Stage 1 Step 15: Adaptation=3.0524, Preservation=0.9593, Effectiveness=0.0000, Balanced Score=0.4000
INFO:robust_balanced_transfer:Stage 1 Step 20: Adaptation=2.2521, Preservation=0.9585, Effectiveness=0.0080, Balanced Score=0.4069
INFO:robust_balanced_transfer:ðŸŽ¯ NEW BEST robust score: 0.4069
INFO:robust_balanced_transfer:ROBUST stage 2: lr=0.002, reg=0.03
INFO:robust_balanced_transfer:Stage 2 Step 0: Adaptation=1.5263, Preservation=0.9568, Effectiveness=0.1670, Balanced Score=0.5431
INFO:robust_balanced_transfer:ðŸŽ¯ NEW BEST robust score: 0.5431
INFO:robust_balanced_transfer:Stage 2 Step 5: Adaptation=1.1064, Preservation=0.9472, Effectiveness=0.3570, Balanced Score=0.7060
INFO:robust_balanced_transfer:ðŸŽ¯ NEW BEST robust score: 0.7060
INFO:robust_balanced_transfer:Stage 2 Step 10: Adaptation=0.7584, Preservation=0.9135, Effectiveness=0.6310, Balanced Score=0.9409
INFO:robust_balanced_transfer:ðŸŽ¯ NEW BEST robust score: 0.9409
INFO:robust_balanced_transfer:Stage 2 Step 15: Adaptation=0.4919, Preservation=0.7093, Effectiveness=0.9430, Balanced Score=0.9547
INFO:robust_balanced_transfer:ðŸŽ¯ NEW BEST robust score: 0.9547
INFO:robust_balanced_transfer:Stage 2 Step 20: Adaptation=0.3048, Preservation=0.1648, Effectiveness=1.0000, Balanced Score=0.6824
INFO:robust_balanced_transfer:ROBUST stage 3: lr=0.0015, reg=0.02
INFO:robust_balanced_transfer:Stage 3 Step 0: Adaptation=0.1833, Preservation=0.1460, Effectiveness=1.0000, Balanced Score=0.6730
INFO:robust_balanced_transfer:Stage 3 Step 5: Adaptation=0.1231, Preservation=0.1435, Effectiveness=1.0000, Balanced Score=0.6717
INFO:robust_balanced_transfer:Stage 3 Step 10: Adaptation=0.0829, Preservation=0.1418, Effectiveness=1.0000, Balanced Score=0.6709
INFO:robust_balanced_transfer:Stage 3 Step 15: Adaptation=0.0574, Preservation=0.1413, Effectiveness=1.0000, Balanced Score=0.6707
INFO:robust_balanced_transfer:Stage 3 Step 20: Adaptation=0.0418, Preservation=0.1408, Effectiveness=1.0000, Balanced Score=0.6704
INFO:robust_balanced_transfer:ROBUST stage 4: lr=0.001, reg=0.01
INFO:robust_balanced_transfer:Stage 4 Step 0: Adaptation=0.0322, Preservation=0.1408, Effectiveness=1.0000, Balanced Score=0.6704
INFO:robust_balanced_transfer:Stage 4 Step 5: Adaptation=0.0246, Preservation=0.1398, Effectiveness=1.0000, Balanced Score=0.6699
INFO:robust_balanced_transfer:Stage 4 Step 10: Adaptation=0.0192, Preservation=0.1393, Effectiveness=1.0000, Balanced Score=0.6697
INFO:robust_balanced_transfer:Stage 4 Step 15: Adaptation=0.0153, Preservation=0.1393, Effectiveness=1.0000, Balanced Score=0.6697
INFO:robust_balanced_transfer:Stage 4 Step 20: Adaptation=0.0127, Preservation=0.1393, Effectiveness=1.0000, Balanced Score=0.6697
INFO:robust_balanced_transfer:ROBUST stage 5: lr=0.0008, reg=0.005
INFO:robust_balanced_transfer:Stage 5 Step 0: Adaptation=0.0108, Preservation=0.1390, Effectiveness=1.0000, Balanced Score=0.6695
Traceback (most recent call last):
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/run_clean_experiment.py", line 354, in <module>
    main()
    ~~~~^^
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/run_clean_experiment.py", line 346, in main
    result = run_clean_experiment(approach, seed, config_params)
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/run_clean_experiment.py", line 274, in run_clean_experiment
    transfer_system.setup_injection_system(transfer_class, source_train_loader, target_train_loader)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/robust_balanced_transfer.py", line 227, in setup_injection_system
    self._robust_final_layer_adaptation(target_class, source_loader, target_loader)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/robust_balanced_transfer.py", line 134, in _robust_final_layer_adaptation
    current_metrics = self.preservation_evaluator.evaluate_transfer_metrics(
        self.target_model, self, source_loader, target_loader,
        target_class, self.source_classes, self.target_classes)
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/corrected_metrics.py", line 58, in evaluate_transfer_metrics
    transfer_specificity = self._evaluate_transfer_specificity(
        model, transfer_system, source_test_loader, transfer_class, source_classes, target_classes)
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/corrected_metrics.py", line 164, in _evaluate_transfer_specificity
    enhanced_outputs = transfer_system.transfer_concept(unintended_data, transfer_class)
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/neural_concept_transfer.py", line 838, in transfer_concept
    original_features = self.target_model.get_features(input_data)
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/architectures.py", line 69, in get_features
    x = F.relu(self.bn1(self.fc1(x)))
                        ~~~~~~~~^^^
  File "/Users/liyamchitayat/miniconda3/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/liyamchitayat/miniconda3/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/liyamchitayat/miniconda3/lib/python3.13/site-packages/torch/nn/modules/linear.py", line 125, in forward
    return F.linear(input, self.weight, self.bias)
           ~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt
