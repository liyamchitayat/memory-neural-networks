INFO:experimental_framework:Created subset with 8000 samples for classes {2, 3, 4, 5, 6, 7, 8, 9}
INFO:experimental_framework:Class distribution: {2: 1000, 3: 1000, 4: 1000, 5: 1000, 6: 1000, 7: 1000, 8: 1000, 9: 1000}
INFO:experimental_framework:Created subset with 8000 samples for classes {0, 1, 2, 3, 4, 5, 6, 7}
INFO:experimental_framework:Class distribution: {0: 1000, 1: 1000, 2: 1000, 3: 1000, 4: 1000, 5: 1000, 6: 1000, 7: 1000}
INFO:experimental_framework:Created subset with 1600 samples for classes {2, 3, 4, 5, 6, 7, 8, 9}
INFO:experimental_framework:Class distribution: {2: 200, 3: 200, 4: 200, 5: 200, 6: 200, 7: 200, 8: 200, 9: 200}
INFO:experimental_framework:Created subset with 1600 samples for classes {0, 1, 2, 3, 4, 5, 6, 7}
INFO:experimental_framework:Class distribution: {0: 200, 1: 200, 2: 200, 3: 200, 4: 200, 5: 200, 6: 200, 7: 200}
INFO:experimental_framework:Epoch 1/5: Loss = 1.3623, Accuracy = 0.7950
INFO:experimental_framework:Epoch 2/5: Loss = 0.6308, Accuracy = 0.8862
INFO:experimental_framework:Epoch 3/5: Loss = 0.4738, Accuracy = 0.9000
INFO:experimental_framework:âœ“ Model achieved required accuracy 0.9000 >= 0.9
INFO:experimental_framework:Epoch 1/5: Loss = 0.6250, Accuracy = 0.9287
INFO:experimental_framework:âœ“ Model achieved required accuracy 0.9287 >= 0.9
INFO:neural_concept_transfer:Source classes S_B: {2, 3, 4, 5, 6, 7, 8, 9}
INFO:neural_concept_transfer:Target classes S_A: {0, 1, 2, 3, 4, 5, 6, 7}
INFO:neural_concept_transfer:Shared classes S_shared: {2, 3, 4, 5, 6, 7}
INFO:neural_concept_transfer:Transfer classes: {8, 9}
INFO:improved_sae_robust_transfer:ðŸ”§ Initialized Improved SAE Integration System
INFO:improved_sae_robust_transfer:   - Target feature dimension: 64
INFO:improved_sae_robust_transfer:   - Trainable integration weights: 64 parameters
INFO:improved_sae_robust_transfer:   - Trainable injection strength: 1 parameter
INFO:improved_sae_robust_transfer:   - Total new parameters: 65
INFO:improved_sae_robust_transfer:   - Replaces: Single rho blending parameter
INFO:neural_concept_transfer:=== Fitting Neural Concept Transfer System ===
INFO:neural_concept_transfer:Step 1: Training Sparse Autoencoders
INFO:neural_concept_transfer:Training source SAE...
INFO:neural_concept_transfer:SAE Epoch 0: Loss = 0.0850
INFO:neural_concept_transfer:SAE Epoch 20: Loss = 0.0077
INFO:neural_concept_transfer:SAE Epoch 40: Loss = 0.0068
INFO:neural_concept_transfer:Training target SAE...
INFO:neural_concept_transfer:SAE Epoch 0: Loss = 0.0727
INFO:neural_concept_transfer:SAE Epoch 20: Loss = 0.0137
INFO:neural_concept_transfer:SAE Epoch 40: Loss = 0.0128
INFO:neural_concept_transfer:Step 2: Extracting concept centroids
INFO:neural_concept_transfer:Class 2: 1000 samples
INFO:neural_concept_transfer:Class 3: 1000 samples
INFO:neural_concept_transfer:Class 4: 1000 samples
INFO:neural_concept_transfer:Class 5: 1000 samples
INFO:neural_concept_transfer:Class 6: 1000 samples
INFO:neural_concept_transfer:Class 7: 1000 samples
INFO:neural_concept_transfer:Class 8: 1000 samples
INFO:neural_concept_transfer:Class 9: 1000 samples
INFO:neural_concept_transfer:Class 0: 1000 samples
INFO:neural_concept_transfer:Class 1: 1000 samples
INFO:neural_concept_transfer:Class 2: 1000 samples
INFO:neural_concept_transfer:Class 3: 1000 samples
INFO:neural_concept_transfer:Class 4: 1000 samples
INFO:neural_concept_transfer:Class 5: 1000 samples
INFO:neural_concept_transfer:Class 6: 1000 samples
INFO:neural_concept_transfer:Class 7: 1000 samples
INFO:neural_concept_transfer:Step 3: Fitting Orthogonal Procrustes alignment
INFO:neural_concept_transfer:Procrustes alignment error: 0.3032
INFO:neural_concept_transfer:Step 4: Discovering free space
INFO:neural_concept_transfer:Used space rank: 8, Free dimensions: 8
INFO:neural_concept_transfer:System fitted successfully: {'alignment_error': np.float32(0.30324578), 'concept_dim': 24, 'n_shared_classes': 6, 'n_transfer_classes': 2, 'free_dimensions': 8}
INFO:improved_sae_robust_transfer:Setting up IMPROVED SAE injection for class 8
INFO:improved_sae_robust_transfer:Training IMPROVED SAE injection system...
INFO:improved_sae_robust_transfer:IMPROVED SAE injection training for class 8
INFO:improved_sae_robust_transfer:   - Training steps: 50 (same as parent)
INFO:improved_sae_robust_transfer:   - Learning rate: 0.006 (same as parent)
INFO:improved_sae_robust_transfer:   - Optimizing: 9 injection params + 65 SAE params
INFO:improved_sae_robust_transfer:IMPROVED SAE step 0: Loss = 5.0724
INFO:improved_sae_robust_transfer:   Transfer Loss: 5.0614, Preservation Loss: 0.1097
INFO:improved_sae_robust_transfer:   Blend weights range: [0.498, 0.502]
INFO:improved_sae_robust_transfer:   Mean blend weight: 0.500
INFO:improved_sae_robust_transfer:   Injection strength: 0.711
INFO:improved_sae_robust_transfer:IMPROVED SAE step 10: Loss = 5.2136
INFO:improved_sae_robust_transfer:   Transfer Loss: 5.2059, Preservation Loss: 0.0760
INFO:improved_sae_robust_transfer:   Blend weights range: [0.484, 0.516]
INFO:improved_sae_robust_transfer:   Mean blend weight: 0.502
INFO:improved_sae_robust_transfer:   Injection strength: 0.711
INFO:improved_sae_robust_transfer:IMPROVED SAE step 20: Loss = 5.0580
INFO:improved_sae_robust_transfer:   Transfer Loss: 5.0413, Preservation Loss: 0.1679
INFO:improved_sae_robust_transfer:   Blend weights range: [0.471, 0.530]
INFO:improved_sae_robust_transfer:   Mean blend weight: 0.506
INFO:improved_sae_robust_transfer:   Injection strength: 0.711
INFO:improved_sae_robust_transfer:IMPROVED SAE step 30: Loss = 5.0308
INFO:improved_sae_robust_transfer:   Transfer Loss: 5.0258, Preservation Loss: 0.0501
INFO:improved_sae_robust_transfer:   Blend weights range: [0.459, 0.543]
INFO:improved_sae_robust_transfer:   Mean blend weight: 0.509
INFO:improved_sae_robust_transfer:   Injection strength: 0.711
INFO:improved_sae_robust_transfer:IMPROVED SAE step 40: Loss = 5.9088
INFO:improved_sae_robust_transfer:   Transfer Loss: 5.8919, Preservation Loss: 0.1692
INFO:improved_sae_robust_transfer:   Blend weights range: [0.447, 0.557]
INFO:improved_sae_robust_transfer:   Mean blend weight: 0.513
INFO:improved_sae_robust_transfer:   Injection strength: 0.711
INFO:improved_sae_robust_transfer:âœ… IMPROVED SAE injection training completed
INFO:improved_sae_robust_transfer:ROBUST adaptation for class 8
INFO:robust_balanced_transfer:Starting ROBUST adaptation for class 8
INFO:robust_balanced_transfer:ROBUST adaptation with 39 samples
INFO:robust_balanced_transfer:ROBUST stage 1: lr=0.003, reg=0.05
INFO:robust_balanced_transfer:Stage 1 Step 0: Adaptation=5.8782, Preservation=0.9607, Effectiveness=0.0000, Balanced Score=0.4000
INFO:robust_balanced_transfer:ðŸŽ¯ NEW BEST robust score: 0.4000
INFO:robust_balanced_transfer:Stage 1 Step 5: Adaptation=4.9951, Preservation=0.9611, Effectiveness=0.0000, Balanced Score=0.4000
INFO:robust_balanced_transfer:Stage 1 Step 10: Adaptation=4.1195, Preservation=0.9614, Effectiveness=0.0000, Balanced Score=0.4000
INFO:robust_balanced_transfer:Stage 1 Step 15: Adaptation=3.2596, Preservation=0.9614, Effectiveness=0.0000, Balanced Score=0.4000
INFO:robust_balanced_transfer:Stage 1 Step 20: Adaptation=2.4335, Preservation=0.9615, Effectiveness=0.0110, Balanced Score=0.4094
INFO:robust_balanced_transfer:ðŸŽ¯ NEW BEST robust score: 0.4094
INFO:robust_balanced_transfer:ROBUST stage 2: lr=0.002, reg=0.03
INFO:robust_balanced_transfer:Stage 2 Step 0: Adaptation=1.6754, Preservation=0.9570, Effectiveness=0.1430, Balanced Score=0.5226
INFO:robust_balanced_transfer:ðŸŽ¯ NEW BEST robust score: 0.5226
INFO:robust_balanced_transfer:Stage 2 Step 5: Adaptation=1.2311, Preservation=0.9490, Effectiveness=0.3790, Balanced Score=0.7249
INFO:robust_balanced_transfer:ðŸŽ¯ NEW BEST robust score: 0.7249
INFO:robust_balanced_transfer:Stage 2 Step 10: Adaptation=0.8568, Preservation=0.9229, Effectiveness=0.6330, Balanced Score=0.9426
INFO:robust_balanced_transfer:ðŸŽ¯ NEW BEST robust score: 0.9426
INFO:robust_balanced_transfer:Stage 2 Step 15: Adaptation=0.5640, Preservation=0.7475, Effectiveness=0.9150, Balanced Score=0.9738
INFO:robust_balanced_transfer:ðŸŽ¯ NEW BEST robust score: 0.9738
INFO:robust_balanced_transfer:Stage 2 Step 20: Adaptation=0.3533, Preservation=0.2303, Effectiveness=0.9860, Balanced Score=0.7151
INFO:robust_balanced_transfer:ROBUST stage 3: lr=0.0015, reg=0.02
INFO:robust_balanced_transfer:Stage 3 Step 0: Adaptation=0.2133, Preservation=0.0531, Effectiveness=0.9990, Balanced Score=0.6266
INFO:robust_balanced_transfer:Stage 3 Step 5: Adaptation=0.1433, Preservation=0.0000, Effectiveness=1.0000, Balanced Score=0.6000
INFO:robust_balanced_transfer:Stage 3 Step 10: Adaptation=0.0960, Preservation=0.0000, Effectiveness=1.0000, Balanced Score=0.6000
INFO:robust_balanced_transfer:Stage 3 Step 15: Adaptation=0.0656, Preservation=0.0000, Effectiveness=1.0000, Balanced Score=0.6000
INFO:robust_balanced_transfer:Stage 3 Step 20: Adaptation=0.0470, Preservation=0.0000, Effectiveness=1.0000, Balanced Score=0.6000
INFO:robust_balanced_transfer:ROBUST stage 4: lr=0.001, reg=0.01
INFO:robust_balanced_transfer:Stage 4 Step 0: Adaptation=0.0356, Preservation=0.0000, Effectiveness=1.0000, Balanced Score=0.6000
INFO:robust_balanced_transfer:Stage 4 Step 5: Adaptation=0.0272, Preservation=0.0000, Effectiveness=1.0000, Balanced Score=0.6000
INFO:robust_balanced_transfer:Stage 4 Step 10: Adaptation=0.0211, Preservation=0.0000, Effectiveness=1.0000, Balanced Score=0.6000
INFO:robust_balanced_transfer:Stage 4 Step 15: Adaptation=0.0168, Preservation=0.0000, Effectiveness=1.0000, Balanced Score=0.6000
INFO:robust_balanced_transfer:Stage 4 Step 20: Adaptation=0.0138, Preservation=0.0000, Effectiveness=1.0000, Balanced Score=0.6000
INFO:robust_balanced_transfer:ROBUST stage 5: lr=0.0008, reg=0.005
Traceback (most recent call last):
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/run_simple_experiment.py", line 183, in <module>
    main()
    ~~~~^^
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/run_simple_experiment.py", line 175, in main
    result = run_simple_experiment(approach, seed, config_params)
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/run_simple_experiment.py", line 99, in run_simple_experiment
    transfer_system.setup_injection_system(config_params['transfer_class'], source_train_loader, target_train_loader)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/improved_sae_robust_transfer.py", line 88, in setup_injection_system
    self._robust_final_layer_adaptation(target_class, source_loader, target_loader)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/robust_balanced_transfer.py", line 134, in _robust_final_layer_adaptation
    current_metrics = self.preservation_evaluator.evaluate_transfer_metrics(
        self.target_model, self, source_loader, target_loader,
        target_class, self.source_classes, self.target_classes)
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/corrected_metrics.py", line 54, in evaluate_transfer_metrics
    original_preservation = self._evaluate_original_knowledge_preservation(
        model, transfer_system, target_test_loader, target_classes, transfer_class)
  File "/Users/liyamchitayat/Documents/PhD/code/memory_transfer_nn/corrected_metrics.py", line 84, in _evaluate_original_knowledge_preservation
    for data, target in target_test_loader:
                        ^^^^^^^^^^^^^^^^^^
  File "/Users/liyamchitayat/miniconda3/lib/python3.13/site-packages/torch/utils/data/dataloader.py", line 733, in __next__
    data = self._next_data()
  File "/Users/liyamchitayat/miniconda3/lib/python3.13/site-packages/torch/utils/data/dataloader.py", line 789, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/Users/liyamchitayat/miniconda3/lib/python3.13/site-packages/torch/utils/data/_utils/fetch.py", line 50, in fetch
    data = self.dataset.__getitems__(possibly_batched_index)
  File "/Users/liyamchitayat/miniconda3/lib/python3.13/site-packages/torch/utils/data/dataset.py", line 416, in __getitems__
    return [self.dataset[self.indices[idx]] for idx in indices]
            ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^
  File "/Users/liyamchitayat/miniconda3/lib/python3.13/site-packages/torchvision/datasets/mnist.py", line 143, in __getitem__
    img = Image.fromarray(img.numpy(), mode="L")
  File "/Users/liyamchitayat/miniconda3/lib/python3.13/site-packages/PIL/Image.py", line 3314, in fromarray
    deprecate("'mode' parameter", 13)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/liyamchitayat/miniconda3/lib/python3.13/site-packages/PIL/_deprecate.py", line 68, in deprecate
    warnings.warn(
    ~~~~~~~~~~~~~^
        f"{deprecated} {is_} deprecated and will be removed in {removed}{action}",
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        DeprecationWarning,
        ^^^^^^^^^^^^^^^^^^^
        stacklevel=stacklevel,
        ^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
KeyboardInterrupt
